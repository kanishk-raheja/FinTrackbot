# GreenBuddy Chatbot - Code Explanation

## 1. app.py (Lines 1-84)
This is the main backend server file that handles the chatbot functionality using Flask and Google's Gemini AI.

### Key Components:
- **Flask Setup** (Lines 1-12):
  - Creates a Flask application with CORS support for cross-origin requests
  - Environment Variables: Uses python-dotenv to load API keys from .env file
- **Gemini AI Integration** (Lines 14-18):
  - Configures the Gemini API using the API key
  - Initializes the Gemini Pro model
- **System Prompt** (Lines 20-36):
  - Defines a comprehensive gardening-focused system prompt for the AI
- **Chat Endpoint** (Lines 38-84):
  - Handles POST requests to '/chat'
  - Processes user messages
  - Manages conversation with Gemini AI
  - Handles errors and rate limiting
  - Returns JSON responses

## 2. script.js (Lines 1-263)
This file contains all the frontend JavaScript functionality for the chatbot interface.

### Key Functions:
- **Chatbot UI Controls** (Lines 1-40):
  - Toggle chatbot visibility
  - Handle close button
  - Manage "Try Now" button functionality
- **Message Handling**:
  - `addUserMessage()` (Lines 62-67): Displays user messages in the chat
  - `addBotMessage()` (Lines 166-179): Displays bot responses with markdown parsing
  - `parseMarkdown()` (Lines 71-103): Converts markdown text to HTML
- **Text-to-Speech**:
  - `speakText()` (Lines 104-165): Implements text-to-speech functionality
  - TTS toggle button functionality (Lines 166-179)
- **UI Indicators**:
  - `showTypingIndicator()` (Lines 180-196): Shows typing animation
  - `hideTypingIndicator()` (Lines 197-203): Removes typing animation
- **API Communication**:
  - `sendMessage()` (Lines 204-263): Handles message sending to backend
  - Error handling and response processing

## 3. index.html (Lines 1-630)
The main landing page and chatbot interface.

### Key Components:
- **HTML Structure** (Lines 1-10):
  - Responsive design with meta viewport
  - Font Awesome icons integration
- **CSS Styling** (Lines 11-250):
  - Custom CSS variables for theming
  - Dark mode support
  - Responsive grid layout
  - Modern UI components
- **Chatbot Interface** (Lines 251-500):
  - Floating chat window
  - Message display area
  - Input field with send button
  - Header with close button
- **Features Section** (Lines 501-630):
  - Grid layout of feature cards
  - Hover animations
  - Icon integration

## 4. requirements.txt (Lines 1-6)
Lists all Python dependencies required for the project:

- **flask==2.0.1**: Web framework for the backend
- **flask-cors==3.0.10**: Handles Cross-Origin Resource Sharing
- **requests==2.26.0**: HTTP library for API calls
- **python-dotenv==0.19.0**: Environment variable management
- **google-generativeai==0.3.2**: Google's Gemini AI integration
- **python-docx==0.8.11**: Word document processing

## 5. .env (Lines 1-2)
Contains environment variables:
- GEMINI_API_KEY: API key for Google's Gemini AI service

## 6. Additional Files:
- **chatbot.html** (Lines 1-524): Full-page version of the chatbot interface
- **create_report.py** (Lines 1-187): Script for generating reports
- **reformat_report.py** (Lines 1-245): Script for reformatting existing reports
- **README.md** (Lines 1-96): Project documentation and setup instructions
- **.gitignore** (Lines 1-2): Specifies files to be ignored by Git
- **power.txt** (Lines 1-212): Contains additional documentation or notes
- **gardenchatbot.zip** and **greenbuddy.zip**: Archived versions of the project

## System Architecture:
1. **Frontend**:
   - HTML/CSS for UI
   - JavaScript for interactivity
   - Text-to-speech capabilities
   - Markdown support

2. **Backend**:
   - Flask server
   - Gemini AI integration
   - Error handling
   - Rate limiting

3. **Features**:
   - Real-time chat
   - Gardening-specific responses
   - Text-to-speech
   - Dark mode
   - Responsive design
   - Markdown formatting
   - Error handling
   - Rate limiting protection
